{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./user.service\";\nimport * as i2 from \"@stomp/ng2-stompjs\";\nimport * as i3 from \"./status-code.service\";\nimport * as i4 from \"./toast.service\";\nimport * as i5 from \"./modal.service\";\nexport let BattleService = /*#__PURE__*/(() => {\n  class BattleService {\n    constructor(userService, RXStompService, statusCodeService, toastService, modalService) {\n      this.userService = userService;\n      this.RXStompService = RXStompService;\n      this.statusCodeService = statusCodeService;\n      this.toastService = toastService;\n      this.modalService = modalService;\n      this.battleOn = false;\n      this.modalFirstOpened = false;\n      this.sendingRequest = false;\n      this.currentChallengeRequest = {\n        id: 0,\n        acceptedStatus: false,\n        rejectedStatus: false,\n        attackingUser: {\n          id: 0,\n          username: \"\",\n          favoriteColor: \"\",\n          adminStatus: false,\n          verifiedStatus: false,\n          pets: []\n        },\n        defendingUser: {\n          id: 0,\n          username: \"\",\n          favoriteColor: \"\",\n          adminStatus: false,\n          verifiedStatus: false,\n          pets: []\n        },\n        resultingBattle: {\n          id: 0,\n          battleType: \"\",\n          maxNumberOfAttackingPets: 0,\n          maxNumberOfDefendingPets: 0,\n          attackingUser: {\n            id: 0,\n            username: \"\",\n            favoriteColor: \"\",\n            adminStatus: false,\n            verifiedStatus: false,\n            pets: []\n          },\n          attackingBattlePets: [],\n          defendingUser: {\n            id: 0,\n            username: \"\",\n            favoriteColor: \"\",\n            adminStatus: false,\n            verifiedStatus: false,\n            pets: []\n          },\n          defendingBattlePets: [],\n          nextTurnUser: {\n            id: 0,\n            username: \"\",\n            favoriteColor: \"\",\n            adminStatus: false,\n            verifiedStatus: false,\n            pets: []\n          },\n          battleFinished: false,\n          winningUser: {\n            id: 0,\n            username: \"\",\n            favoriteColor: \"\",\n            adminStatus: false,\n            verifiedStatus: false,\n            pets: []\n          },\n          losingUser: {\n            id: 0,\n            username: \"\",\n            favoriteColor: \"\",\n            adminStatus: false,\n            verifiedStatus: false,\n            pets: []\n          },\n          createdOn: \",\",\n          turns: [{\n            id: 0,\n            turnNumber: 0,\n            attackingPet: {\n              id: 0,\n              name: \"\",\n              image: {\n                id: 0,\n                imageURL: \"\"\n              },\n              type: \"\",\n              hunger: 0,\n              currentHealth: 0,\n              maxHealth: 0,\n              strength: 0,\n              agility: 0,\n              intelligence: 0,\n              petLevel: 0,\n              currentXP: 0,\n              availableLevelUps: 0,\n              owner: {\n                id: 0,\n                username: \"\",\n                favoriteColor: \"\",\n                adminStatus: false\n              }\n            },\n            defendingPet: {\n              id: 0,\n              name: \"\",\n              image: {\n                id: 0,\n                imageURL: \"\"\n              },\n              type: \"\",\n              hunger: 0,\n              currentHealth: 0,\n              maxHealth: 0,\n              strength: 0,\n              agility: 0,\n              intelligence: 0,\n              petLevel: 0,\n              currentXP: 0,\n              availableLevelUps: 0,\n              owner: {\n                id: 0,\n                username: \"\",\n                favoriteColor: \"\",\n                adminStatus: false\n              }\n            },\n            attackingPetCurrentHealth: 0,\n            defendingPetCurrentHealth: 0,\n            attackingPetAttackModifier: 0,\n            defendingPetAttackModifier: 0,\n            attackingPetArmorModifier: 0,\n            defendingPetArmorModifier: 0,\n            attackingPetAccuracyModifier: 0,\n            defendingPetAccuracyModifier: 0,\n            attackingPetEvasionModifier: 0,\n            defendingPetEvasionModifier: 0,\n            turnFlavorText: \"\",\n            attackerReplacedDeadPet: false,\n            defenderReplacedDeadPet: false,\n            battleFinished: false,\n            createdOn: \"\"\n          }]\n        },\n        createdOn: \"\"\n      };\n      this.currentBattle = {\n        id: 0,\n        battleType: \"\",\n        maxNumberOfAttackingPets: 0,\n        maxNumberOfDefendingPets: 0,\n        attackingUser: {\n          id: 0,\n          username: \"\",\n          favoriteColor: \"\",\n          adminStatus: false,\n          verifiedStatus: false,\n          pets: []\n        },\n        attackingBattlePets: [{\n          id: 0,\n          pet: {\n            id: 0,\n            name: \"\",\n            image: {\n              id: 0,\n              imageURL: \"\"\n            },\n            type: \"\",\n            hunger: 0,\n            currentHealth: 0,\n            maxHealth: 0,\n            strength: 0,\n            agility: 0,\n            intelligence: 0,\n            petLevel: 0,\n            currentXP: 0,\n            availableLevelUps: 0,\n            owner: {\n              id: 0,\n              username: \"\",\n              favoriteColor: \"\",\n              adminStatus: false\n            }\n          },\n          currentHealth: 0,\n          aliveStatus: false\n        }],\n        defendingUser: {\n          id: 0,\n          username: \"\",\n          favoriteColor: \"\",\n          adminStatus: false,\n          verifiedStatus: false,\n          pets: []\n        },\n        defendingBattlePets: [{\n          id: 0,\n          pet: {\n            id: 0,\n            name: \"\",\n            image: {\n              id: 0,\n              imageURL: \"\"\n            },\n            type: \"\",\n            hunger: 0,\n            currentHealth: 0,\n            maxHealth: 0,\n            strength: 0,\n            agility: 0,\n            intelligence: 0,\n            petLevel: 0,\n            currentXP: 0,\n            availableLevelUps: 0,\n            owner: {\n              id: 0,\n              username: \"\",\n              favoriteColor: \"\",\n              adminStatus: false\n            }\n          },\n          currentHealth: 0,\n          aliveStatus: false\n        }],\n        nextTurnUser: {\n          id: 0,\n          username: \"\",\n          favoriteColor: \"\",\n          adminStatus: false,\n          verifiedStatus: false,\n          pets: []\n        },\n        battleFinished: false,\n        winningUser: {\n          id: 0,\n          username: \"\",\n          favoriteColor: \"\",\n          adminStatus: false,\n          verifiedStatus: false,\n          pets: []\n        },\n        losingUser: {\n          id: 0,\n          username: \"\",\n          favoriteColor: \"\",\n          adminStatus: false,\n          verifiedStatus: false,\n          pets: []\n        },\n        createdOn: \",\",\n        turns: [{\n          id: 0,\n          turnNumber: 0,\n          attackingPet: {\n            id: 0,\n            name: \"\",\n            image: {\n              id: 0,\n              imageURL: \"\"\n            },\n            type: \"\",\n            hunger: 0,\n            currentHealth: 0,\n            maxHealth: 0,\n            strength: 0,\n            agility: 0,\n            intelligence: 0,\n            petLevel: 0,\n            currentXP: 0,\n            availableLevelUps: 0,\n            owner: {\n              id: 0,\n              username: \"\",\n              favoriteColor: \"\",\n              adminStatus: false\n            }\n          },\n          defendingPet: {\n            id: 0,\n            name: \"\",\n            image: {\n              id: 0,\n              imageURL: \"\"\n            },\n            type: \"\",\n            hunger: 0,\n            currentHealth: 0,\n            maxHealth: 0,\n            strength: 0,\n            agility: 0,\n            intelligence: 0,\n            petLevel: 0,\n            currentXP: 0,\n            availableLevelUps: 0,\n            owner: {\n              id: 0,\n              username: \"\",\n              favoriteColor: \"\",\n              adminStatus: false\n            }\n          },\n          attackingPetCurrentHealth: 0,\n          defendingPetCurrentHealth: 0,\n          attackingPetAttackModifier: 0,\n          defendingPetAttackModifier: 0,\n          attackingPetArmorModifier: 0,\n          defendingPetArmorModifier: 0,\n          attackingPetAccuracyModifier: 0,\n          defendingPetAccuracyModifier: 0,\n          attackingPetEvasionModifier: 0,\n          defendingPetEvasionModifier: 0,\n          turnFlavorText: \"\",\n          attackerReplacedDeadPet: false,\n          defenderReplacedDeadPet: false,\n          battleFinished: false,\n          createdOn: \"\"\n        }]\n      };\n      this.challengeRequests = [];\n      this.currentBattles = [];\n    }\n\n    getPVEBattle(battleId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let currentBattleJSON = yield fetch(`${environment.fothuZoneEC2Link}/battles/id/${battleId}`);\n        this.currentBattle = yield currentBattleJSON.json();\n      });\n    }\n\n    getPVPBattle(battleId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let currentBattleJSON = yield fetch(`${environment.fothuZoneEC2Link}/battles/id/${battleId}`);\n        this.currentBattle = yield currentBattleJSON.json();\n        console.log(this.currentBattle);\n      });\n    }\n\n    acceptChallengeRequest(challengeRequestId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let acceptedChallengeRequestJSON = yield fetch(`${environment.fothuZoneEC2Link}/challengeRequests/accept/challengeRequestId/${challengeRequestId}`, {\n          method: \"PUT\"\n        });\n\n        if (this.statusCodeService.checkSuccessStatus(acceptedChallengeRequestJSON)) {\n          let acceptedChallenge = yield acceptedChallengeRequestJSON.json();\n          this.toastService.successfulRequestToast(\"Challenge Accepted!\");\n        } else {\n          this.toastService.unableToSendRequestToast(\"Unable to accept challenge, please try again!\");\n        }\n      });\n    }\n\n    rejectChallengeRequest(challengeRequestId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let rejectedChallengeRequestJSON = yield fetch(`${environment.fothuZoneEC2Link}/challengeRequests/reject/challengeRequestId/${challengeRequestId}`, {\n          method: \"PUT\"\n        });\n\n        if (this.statusCodeService.checkSuccessStatus(rejectedChallengeRequestJSON)) {\n          let rejectedChallenge = yield rejectedChallengeRequestJSON.json();\n          this.toastService.successfulRequestToast(\"Challenge Rejected!\");\n        } else {\n          this.toastService.unableToSendRequestToast(\"Unable to reject challenge, please try again!\");\n        }\n      });\n    }\n\n    setAttackingPVPPet(battleId, attackingPetId) {\n      if (this.isBattlePetsArrayEmpty(this.currentBattle.attackingBattlePets)) {\n        this.RXStompService.publish({\n          destination: `/fothuZoneSendPoint/battles/battleId/${battleId}/setStartingAttackingPet/${attackingPetId}`,\n          body: `${this.userService.currentUser.id}`\n        });\n        console.log(\"1\");\n      } else {\n        this.RXStompService.publish({\n          destination: `/fothuZoneSendPoint/battles/battleId/${battleId}/setAttackingPet/${attackingPetId}`,\n          body: `${this.userService.currentUser.id}`\n        });\n      }\n\n      this.sendingRequest = true;\n    }\n\n    setDefendingPVPPet(battleId, defendingPetId) {\n      if (this.isBattlePetsArrayEmpty(this.currentBattle.defendingBattlePets)) {\n        this.RXStompService.publish({\n          destination: `/fothuZoneSendPoint/battles/battleId/${battleId}/setStartingDefendingPet/${defendingPetId}`,\n          body: `${this.userService.currentUser.id}`\n        });\n      } else {\n        this.RXStompService.publish({\n          destination: `/fothuZoneSendPoint/battles/battleId/${battleId}/setDefendingPet/${defendingPetId}`,\n          body: `${this.userService.currentUser.id}`\n        });\n      }\n\n      this.sendingRequest = true;\n    }\n\n    createPVEBattle(userId, defendingPetId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let newPVEBattleJSON = yield fetch(`${environment.fothuZoneEC2Link}/battles/new/userId/${userId}/defendingPetId/${defendingPetId}/pve`, {\n          method: \"POST\"\n        });\n        this.currentBattle = yield newPVEBattleJSON.json();\n      });\n    }\n\n    attack(battleId) {\n      if (this.currentBattle.attackingUser.id == this.userService.currentUser.id) {\n        this.RXStompService.publish({\n          destination: `/fothuZoneSendPoint/battles/battleId/${battleId}/attackingUser/userId/${this.userService.currentUser.id}/attack`\n        });\n      } else {\n        this.RXStompService.publish({\n          destination: `/fothuZoneSendPoint/battles/battleId/${battleId}/defendingUser/userId/${this.userService.currentUser.id}/attack`\n        });\n      }\n\n      this.sendingRequest = true;\n    }\n\n    defend(battleId) {\n      if (this.currentBattle.attackingUser.id == this.userService.currentUser.id) {\n        this.RXStompService.publish({\n          destination: `/fothuZoneSendPoint/battles/battleId/${battleId}/attackingUser/userId/${this.userService.currentUser.id}/defend`\n        });\n      } else {\n        this.RXStompService.publish({\n          destination: `/fothuZoneSendPoint/battles/battleId/${battleId}/defendingUser/userId/${this.userService.currentUser.id}/defend`\n        });\n      }\n\n      this.sendingRequest = true;\n    }\n\n    aim(battleId) {\n      if (this.currentBattle.attackingUser.id == this.userService.currentUser.id) {\n        this.RXStompService.publish({\n          destination: `/fothuZoneSendPoint/battles/battleId/${battleId}/attackingUser/userId/${this.userService.currentUser.id}/aim`\n        });\n      } else {\n        this.RXStompService.publish({\n          destination: `/fothuZoneSendPoint/battles/battleId/${battleId}/defendingUser/userId/${this.userService.currentUser.id}/aim`\n        });\n      }\n\n      this.sendingRequest = true;\n    }\n\n    sharpen(battleId) {\n      if (this.currentBattle.attackingUser.id == this.userService.currentUser.id) {\n        this.RXStompService.publish({\n          destination: `/fothuZoneSendPoint/battles/battleId/${battleId}/attackingUser/userId/${this.userService.currentUser.id}/sharpen`\n        });\n      } else {\n        this.RXStompService.publish({\n          destination: `/fothuZoneSendPoint/battles/battleId/${battleId}/defendingUser/userId/${this.userService.currentUser.id}/sharpen`\n        });\n      }\n\n      this.sendingRequest = true;\n    }\n\n    evade(battleId) {\n      if (this.currentBattle.attackingUser.id == this.userService.currentUser.id) {\n        this.RXStompService.publish({\n          destination: `/fothuZoneSendPoint/battles/battleId/${battleId}/attackingUser/userId/${this.userService.currentUser.id}/evade`\n        });\n      } else {\n        this.RXStompService.publish({\n          destination: `/fothuZoneSendPoint/battles/battleId/${battleId}/defendingUser/userId/${this.userService.currentUser.id}/evade`\n        });\n      }\n\n      this.sendingRequest = true;\n    }\n\n    swap(battleId, petId) {\n      if (this.currentBattle.attackingUser.id == this.userService.currentUser.id) {\n        this.RXStompService.publish({\n          destination: `/fothuZoneSendPoint/battles/battleId/${battleId}/swapAttackingPet/${petId}`\n        });\n      } else {\n        this.RXStompService.publish({\n          destination: `/fothuZoneSendPoint/battles/battleId/${battleId}/swapDefendingPet/${petId}`\n        });\n      }\n\n      this.sendingRequest = true;\n    }\n\n    replaceDeadPet(battleId, deadPetId, newPetId) {\n      if (this.currentBattle.attackingUser.id == this.userService.currentUser.id) {\n        this.RXStompService.publish({\n          destination: `/fothuZoneSendPoint/battles/battleId/${battleId}/replaceDeadAttackingPet/${deadPetId}/newAttackingPet/${newPetId}`\n        });\n      } else {\n        this.RXStompService.publish({\n          destination: `fothuZoneSendPoint/battles/battleId/${battleId}/replaceDeadDefendingPet/${deadPetId}/newAttackingPet/${newPetId}`\n        });\n      }\n\n      this.sendingRequest = true;\n    }\n\n    resetBattleServiceBattle() {\n      this.currentBattle = {\n        id: 0,\n        battleType: \"\",\n        maxNumberOfAttackingPets: 0,\n        maxNumberOfDefendingPets: 0,\n        attackingUser: {\n          id: 0,\n          username: \"\",\n          favoriteColor: \"\",\n          adminStatus: false,\n          verifiedStatus: false,\n          pets: []\n        },\n        attackingBattlePets: [{\n          id: 0,\n          pet: {\n            id: 0,\n            name: \"\",\n            image: {\n              id: 0,\n              imageURL: \"\"\n            },\n            type: \"\",\n            hunger: 0,\n            currentHealth: 0,\n            maxHealth: 0,\n            strength: 0,\n            agility: 0,\n            intelligence: 0,\n            petLevel: 0,\n            currentXP: 0,\n            availableLevelUps: 0,\n            owner: {\n              id: 0,\n              username: \"\",\n              favoriteColor: \"\",\n              adminStatus: false\n            }\n          },\n          currentHealth: 0,\n          aliveStatus: false\n        }],\n        defendingUser: {\n          id: 0,\n          username: \"\",\n          favoriteColor: \"\",\n          adminStatus: false,\n          verifiedStatus: false,\n          pets: []\n        },\n        defendingBattlePets: [{\n          id: 0,\n          pet: {\n            id: 0,\n            name: \"\",\n            image: {\n              id: 0,\n              imageURL: \"\"\n            },\n            type: \"\",\n            hunger: 0,\n            currentHealth: 0,\n            maxHealth: 0,\n            strength: 0,\n            agility: 0,\n            intelligence: 0,\n            petLevel: 0,\n            currentXP: 0,\n            availableLevelUps: 0,\n            owner: {\n              id: 0,\n              username: \"\",\n              favoriteColor: \"\",\n              adminStatus: false\n            }\n          },\n          currentHealth: 0,\n          aliveStatus: false\n        }],\n        nextTurnUser: {\n          id: 0,\n          username: \"\",\n          favoriteColor: \"\",\n          adminStatus: false,\n          verifiedStatus: false,\n          pets: []\n        },\n        battleFinished: false,\n        winningUser: {\n          id: 0,\n          username: \"\",\n          favoriteColor: \"\",\n          adminStatus: false,\n          verifiedStatus: false,\n          pets: []\n        },\n        losingUser: {\n          id: 0,\n          username: \"\",\n          favoriteColor: \"\",\n          adminStatus: false,\n          verifiedStatus: false,\n          pets: []\n        },\n        createdOn: \",\",\n        turns: [{\n          id: 0,\n          turnNumber: 0,\n          attackingPet: {\n            id: 0,\n            name: \"\",\n            image: {\n              id: 0,\n              imageURL: \"\"\n            },\n            type: \"\",\n            hunger: 0,\n            currentHealth: 0,\n            maxHealth: 0,\n            strength: 0,\n            agility: 0,\n            intelligence: 0,\n            petLevel: 0,\n            currentXP: 0,\n            availableLevelUps: 0,\n            owner: {\n              id: 0,\n              username: \"\",\n              favoriteColor: \"\",\n              adminStatus: false\n            }\n          },\n          defendingPet: {\n            id: 0,\n            name: \"\",\n            image: {\n              id: 0,\n              imageURL: \"\"\n            },\n            type: \"\",\n            hunger: 0,\n            currentHealth: 0,\n            maxHealth: 0,\n            strength: 0,\n            agility: 0,\n            intelligence: 0,\n            petLevel: 0,\n            currentXP: 0,\n            availableLevelUps: 0,\n            owner: {\n              id: 0,\n              username: \"\",\n              favoriteColor: \"\",\n              adminStatus: false\n            }\n          },\n          attackingPetCurrentHealth: 0,\n          defendingPetCurrentHealth: 0,\n          attackingPetAttackModifier: 0,\n          defendingPetAttackModifier: 0,\n          attackingPetArmorModifier: 0,\n          defendingPetArmorModifier: 0,\n          attackingPetAccuracyModifier: 0,\n          defendingPetAccuracyModifier: 0,\n          attackingPetEvasionModifier: 0,\n          defendingPetEvasionModifier: 0,\n          turnFlavorText: \"\",\n          attackerReplacedDeadPet: false,\n          defenderReplacedDeadPet: false,\n          battleFinished: false,\n          createdOn: \"\"\n        }]\n      };\n    }\n\n    prematureEndPveBattle(userId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let battleJSON = yield fetch(`${environment.fothuZoneEC2Link}/battles/pve/prematureEnd/battleId/${this.currentBattle.id}`, {\n          method: \"PUT\"\n        });\n        let battle = yield battleJSON.json();\n      });\n    }\n\n    getChallengeRequests() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let challengeRequestJSON = yield fetch(`${environment.fothuZoneEC2Link}/challengeRequests/all/pending/userId/${this.userService.currentUser.id}`, {\n          method: \"GET\"\n        });\n        this.challengeRequests = yield challengeRequestJSON.json();\n      });\n    }\n\n    getCurrentBattles() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let currentBattlesJSON = yield fetch(`${environment.fothuZoneEC2Link}/battles/all/pvp/current/userId/${this.userService.currentUser.id}`, {\n          method: \"GET\"\n        });\n        this.currentBattles = yield currentBattlesJSON.json();\n      });\n    }\n\n    isBattlePetsArrayEmpty(array) {\n      if (array.length == 0) {\n        return true;\n      } else if (array[0].id == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n  }\n\n  BattleService.ɵfac = function BattleService_Factory(t) {\n    return new (t || BattleService)(i0.ɵɵinject(i1.UserService), i0.ɵɵinject(i2.RxStompService), i0.ɵɵinject(i3.StatusCodeService), i0.ɵɵinject(i4.ToastService), i0.ɵɵinject(i5.ModalService));\n  };\n\n  BattleService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BattleService,\n    factory: BattleService.ɵfac,\n    providedIn: \"root\"\n  });\n  return BattleService;\n})();","map":null,"metadata":{},"sourceType":"module"}