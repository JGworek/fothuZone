{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@stomp/ng2-stompjs\";\nimport * as i3 from \"./toast.service\";\nimport * as i4 from \"./status-code.service\";\nimport * as i5 from \"./level-up.service\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(router, RxStompService, toastService, statusCodeService, levelUpService) {\n      this.router = router;\n      this.RxStompService = RxStompService;\n      this.toastService = toastService;\n      this.statusCodeService = statusCodeService;\n      this.levelUpService = levelUpService;\n      this.newUser = {\n        id: 0,\n        username: \"\",\n        favoriteColor: \"\",\n        userPassword: \"\",\n        secretPassword: \"\"\n      };\n      this.currentUser = {\n        id: 0,\n        username: \"\",\n        favoriteColor: \"\",\n        adminStatus: false,\n        verifiedStatus: false,\n        pets: []\n      };\n      this.loggingInUser = {\n        id: 0,\n        username: \"\",\n        favoriteColor: \"\",\n        userPassword: \"\",\n        secretPassword: \"\"\n      };\n    }\n\n    getHealthBarColor(percentNumber) {\n      if (percentNumber >= 51) {\n        return \"progress-bar bg-success\";\n      } else if (percentNumber >= 26 && percentNumber < 51) {\n        return \"progress-bar bg-warning\";\n      } else if (percentNumber < 26) {\n        return \"progress-bar bg-danger\";\n      }\n    }\n\n    logIn() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let userJSON = yield fetch(`${environment.fothuZoneEC2Link}/users/login`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(this.loggingInUser)\n        });\n        console.log(userJSON);\n\n        if (this.statusCodeService.checkSuccessStatus(userJSON)) {\n          let returnedUser = yield userJSON.json();\n          console.log(returnedUser);\n          this.currentUser = returnedUser;\n          this.keepUserUpdated();\n          this.trackErrorMessageResponses();\n          this.router.navigate([\"home\"]);\n        } else {\n          console.log(yield userJSON.json());\n          this.toastService.badRequestToast(\"Incorrect Username or Password\");\n        }\n      });\n    }\n\n    logout() {\n      this.userSubscription.unsubscribe();\n      window.location.href = environment.homeURL;\n    }\n\n    keepUserUpdated() {\n      this.userSubscription = this.RxStompService.watch(`/userSubscription/${this.currentUser.id}`, {\n        id: this.currentUser.id.toString()\n      }).subscribe(userMessage => {\n        if (userMessage.body) {\n          let convertedUserMessage = JSON.parse(userMessage.body);\n          this.currentUser = convertedUserMessage;\n          this.checkIfAnyLevelUps();\n        }\n      });\n    }\n\n    trackErrorMessageResponses() {\n      this.errorSubscription = this.RxStompService.watch(`/errorMessageSubscription/${this.currentUser.id}`, {\n        id: this.currentUser.id.toString()\n      }).subscribe(errorMessage => {\n        if (errorMessage.body) {\n          let convertedErrorMessage = JSON.parse(errorMessage.body);\n          this.toastService.badRequestToast(convertedErrorMessage);\n        }\n      });\n    }\n\n    checkIfAnyLevelUps() {\n      return __awaiter(this, void 0, void 0, function* () {\n        for (let pet of this.currentUser.pets) {\n          if (pet.availableLevelUps > 0) {\n            let petDTOJSON = yield fetch(`${environment.fothuZoneEC2Link}/pets/DTO/id/${pet.id}`);\n            let petDTO = yield petDTOJSON.json();\n            this.levelUpService.currentLevelingUpPet = petDTO;\n            break;\n          }\n        }\n      });\n    }\n\n    allPetsDead() {\n      for (let pet of this.currentUser.pets) {\n        if (pet.currentHealth > 0) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.RxStompService), i0.ɵɵinject(i3.ToastService), i0.ɵɵinject(i4.StatusCodeService), i0.ɵɵinject(i5.LevelUpService));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: \"root\"\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}