{"ast":null,"code":"import { TemplateRef } from \"@angular/core\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/toast.service\";\n\nfunction ToastContainerComponent_ngb_toast_0_ng_template_1_ng_template_0_Template(rf, ctx) {}\n\nfunction ToastContainerComponent_ngb_toast_0_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ToastContainerComponent_ngb_toast_0_ng_template_1_ng_template_0_Template, 0, 0, \"ng-template\", 4);\n  }\n\n  if (rf & 2) {\n    const toast_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"ngTemplateOutlet\", toast_r1.textOrTpl);\n  }\n}\n\nfunction ToastContainerComponent_ngb_toast_0_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    const toast_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵtextInterpolate(toast_r1.textOrTpl);\n  }\n}\n\nfunction ToastContainerComponent_ngb_toast_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ngb-toast\", 1);\n    i0.ɵɵlistener(\"hidden\", function ToastContainerComponent_ngb_toast_0_Template_ngb_toast_hidden_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const toast_r1 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.toastService.remove(toast_r1);\n    });\n    i0.ɵɵtemplate(1, ToastContainerComponent_ngb_toast_0_ng_template_1_Template, 1, 1, \"ng-template\", 2);\n    i0.ɵɵtemplate(2, ToastContainerComponent_ngb_toast_0_ng_template_2_Template, 1, 1, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const toast_r1 = ctx.$implicit;\n\n    const _r3 = i0.ɵɵreference(3);\n\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(toast_r1.classname);\n    i0.ɵɵproperty(\"autohide\", true)(\"delay\", toast_r1.delay || 5000);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isTemplate(toast_r1))(\"ngIfElse\", _r3);\n  }\n}\n\nexport let ToastContainerComponent = /*#__PURE__*/(() => {\n  class ToastContainerComponent {\n    constructor(toastService) {\n      this.toastService = toastService;\n    }\n\n    isTemplate(toast) {\n      return toast.textOrTpl instanceof TemplateRef;\n    }\n\n    ngOnInit() {}\n\n  }\n\n  ToastContainerComponent.ɵfac = function ToastContainerComponent_Factory(t) {\n    return new (t || ToastContainerComponent)(i0.ɵɵdirectiveInject(i1.ToastService));\n  };\n\n  ToastContainerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ToastContainerComponent,\n    selectors: [[\"app-toast-container\"]],\n    hostVars: 2,\n    hostBindings: function ToastContainerComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"ngb-toasts\", true);\n      }\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"class\", \"autohide\", \"delay\", \"hidden\", 4, \"ngFor\", \"ngForOf\"], [3, \"autohide\", \"delay\", \"hidden\"], [3, \"ngIf\", \"ngIfElse\"], [\"text\", \"\"], [3, \"ngTemplateOutlet\"]],\n    template: function ToastContainerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ToastContainerComponent_ngb_toast_0_Template, 4, 6, \"ngb-toast\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngForOf\", ctx.toastService.toasts);\n      }\n    },\n    styles: [\"[_nghost-%COMP%]{position:fixed;top:auto!important;bottom:0!important;right:auto!important;left:0!important;margin:.5em;z-index:1200}\"]\n  });\n  return ToastContainerComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}