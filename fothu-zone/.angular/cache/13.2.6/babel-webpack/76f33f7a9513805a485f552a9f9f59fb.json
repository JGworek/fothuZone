{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/user.service\";\nimport * as i2 from \"src/app/service/battle.service\";\nimport * as i3 from \"src/app/service/level-up.service\";\nimport * as i4 from \"src/app/service/dungeon.service\";\nimport * as i5 from \"@angular/common\";\n\nconst _c0 = function () {\n  return {\n    \"btn btn-dark-fothu bg-dark-fothu text-white font-weight-bold\": true\n  };\n};\n\nfunction DungeonComponent_tr_10_td_1_a_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"a\", 20);\n    i0.ɵɵlistener(\"click\", function DungeonComponent_tr_10_td_1_a_1_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const j_r11 = i0.ɵɵnextContext().index;\n      const i_r8 = i0.ɵɵnextContext().index;\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.setCurrentRoom(i_r8 * 10 + j_r11);\n    });\n    i0.ɵɵtext(1, \" Move \");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction0(1, _c0));\n  }\n}\n\nconst _c1 = function (a0, a1, a2, a3, a4, a5, a6) {\n  return {\n    barren: a0,\n    activeRoom: a1,\n    notExplored: a2,\n    start: a3,\n    boss: a4,\n    ladder: a5,\n    nearby: a6,\n    wrapper: true,\n    mapTd: true\n  };\n};\n\nfunction DungeonComponent_tr_10_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 18);\n    i0.ɵɵtemplate(1, DungeonComponent_tr_10_td_1_a_1_Template, 2, 2, \"a\", 19);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const j_r11 = ctx.index;\n    const i_r8 = i0.ɵɵnextContext().index;\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"id\", i_r8 * 10 + j_r11)(\"ngClass\", i0.ɵɵpureFunction7(3, _c1, !ctx_r9.dungeonService.currentDungeon.nonBarrenCells.includes(i_r8 * 10 + j_r11), ctx_r9.truthArray[i_r8 * 10 + j_r11], ctx_r9.notExploredArray[i_r8 * 10 + j_r11], i_r8 * 10 + j_r11 === ctx_r9.dungeonService.currentDungeon.startingRoom ? ctx_r9.truthArray[i_r8 * 10 + j_r11] : false, i_r8 * 10 + j_r11 === ctx_r9.dungeonService.currentDungeon.bossRoom ? ctx_r9.truthArray[i_r8 * 10 + j_r11] : false, i_r8 * 10 + j_r11 === ctx_r9.dungeonService.currentDungeon.ladderRoom ? ctx_r9.truthArray[i_r8 * 10 + j_r11] : false, ctx_r9.dungeonService.currentDungeon.nonBarrenCells.includes(i_r8 * 10 + j_r11) && ctx_r9.checkIfNearby(i_r8 * 10 + j_r11) ? true : false));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r9.dungeonService.currentDungeon.nonBarrenCells.includes(i_r8 * 10 + j_r11) && ctx_r9.checkIfNearby(i_r8 * 10 + j_r11));\n  }\n}\n\nconst _c2 = function () {\n  return [];\n};\n\nfunction DungeonComponent_tr_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, DungeonComponent_tr_10_td_1_Template, 2, 11, \"td\", 17);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpureFunction0(1, _c2).constructor(10));\n  }\n}\n\nfunction DungeonComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21)(1, \"h5\");\n    i0.ɵɵtext(2, \"Select your figher:\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nconst _c3 = function (a1) {\n  return {\n    \"btn btn-danger btn-outline-warning mx-1\": true,\n    \"inactive-button\": a1\n  };\n};\n\nfunction DungeonComponent_div_12_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 23);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const pet_r19 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c3, !pet_r19.currentHealth));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", pet_r19.name, \" \");\n  }\n}\n\nfunction DungeonComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtemplate(1, DungeonComponent_div_12_button_1_Template, 2, 4, \"button\", 22);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.userService.currentUser.pets);\n  }\n}\n\nfunction DungeonComponent_button_27_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 24);\n    i0.ɵɵlistener(\"click\", function DungeonComponent_button_27_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.fullLog = true;\n    });\n    i0.ɵɵtext(1, \"See Full Log\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction DungeonComponent_button_28_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 24);\n    i0.ɵɵlistener(\"click\", function DungeonComponent_button_28_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.fullLog = false;\n    });\n    i0.ɵɵtext(1, \"See Collapsed Log\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction DungeonComponent_div_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.mapLog[ctx_r5.mapLog.length - 1], \" \");\n  }\n}\n\nfunction DungeonComponent_div_30_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const i_r26 = ctx.index;\n    const ctx_r24 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r24.mapLog[i_r26 + 1], \" \");\n  }\n}\n\nfunction DungeonComponent_div_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, DungeonComponent_div_30_div_1_Template, 2, 1, \"div\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r6.mapLog);\n  }\n}\n\nconst _c4 = function () {\n  return {\n    \"padding-right\": 0,\n    \"padding-left\": 0\n  };\n};\n\nconst _c5 = function () {\n  return {\n    right: 0\n  };\n};\n\nexport let DungeonComponent = /*#__PURE__*/(() => {\n  class DungeonComponent {\n    constructor(userService, battleService, levelUpService, dungeonService) {\n      this.userService = userService;\n      this.battleService = battleService;\n      this.levelUpService = levelUpService;\n      this.dungeonService = dungeonService;\n      this.currentMap = {\n        id: 1,\n        name: \"Mumble's Creek\",\n        startingRoom: 30,\n        bossRoom: 89,\n        ladderRoom: -1,\n        enemyLevel: 1,\n        monsterSpawnRate: 50,\n        nonBarrenCells: [11, 12, 13, 21, 23, 25, 26, 27, 30, 31, 32, 33, 35, 37, 38, 41, 43, 44, 45, 47, 51, 52, 57, 65, 66, 67, 73, 74, 75, 85, 86, 87, 88, 89],\n        bossPet: {\n          id: 3,\n          name: \"Chumbo\",\n          image: {\n            id: 789,\n            imageURL: \"https://fothuzone-pets.s3.amazonaws.com/angry-dinosaur-showing-teeth-clipart.jpg\"\n          },\n          type: \"Strength\",\n          hunger: 5,\n          currentHealth: 14,\n          maxHealth: 14,\n          strength: 8,\n          agility: 6,\n          intelligence: 4,\n          petLevel: 1,\n          currentXP: 0,\n          availableLevelUps: 0,\n          owner: {\n            id: 2,\n            username: \"UberMentch\",\n            favoriteColor: \"purple\",\n            adminStatus: false\n          }\n        }\n      };\n      this.truthArray = new Array(100);\n      this.notExploredArray = new Array(100);\n      this.petSelect = false;\n      this.mapLog = [];\n      this.fullLog = false;\n    }\n\n    checkIfNearby(roomId) {\n      return this.adjacentVertical(roomId) || this.adjacentHorizontal(roomId);\n    }\n\n    onSameColumn(roomId) {\n      // Checks that the ones digit is the same\n      return this.currentRoom % 10 === roomId % 10;\n    }\n\n    onSameRow(roomId) {\n      // Check that the tens digit is the same\n      return Math.floor(this.currentRoom / 10) === Math.floor(roomId / 10);\n    }\n\n    adjacentHorizontal(roomId) {\n      // On the same Row and their IDs are off by 1\n      return this.onSameRow(roomId) && Math.abs(roomId - this.currentRoom) === 1;\n    }\n\n    adjacentVertical(roomId) {\n      // On the same Column and their IDs are off by 10\n      return this.onSameColumn(roomId) && Math.abs(roomId - this.currentRoom) === 10;\n    }\n\n    setCurrentRoom(roomId) {\n      this.truthArray[this.currentRoom] = false;\n      this.currentRoom = roomId;\n      this.notExploredArray[roomId] = false;\n      this.truthArray[roomId] = true;\n      this.mapLog.push(`Moved to room ${this.currentRoom + 1}`);\n    } //DO THIS IN A SERVICE AND DO IT IN THE MAIN MENU AND ALSO AFTER BATTLES ARE COMPLETE\n\n\n    checkLevelUps() {\n      console.log(this.levelUpService.currentLevelingUpPet.availableLevelUps);\n    }\n\n    ngOnInit() {\n      this.notExploredArray.fill(true);\n      this.truthArray.fill(false);\n      this.setCurrentRoom(this.currentMap.startingRoom);\n      this.mapLog.push(`Welcome to ${this.currentMap.name}`);\n    }\n\n    ngOnDestroy() {\n      if (this.battleService.currentBattle.battleType.toLowerCase() == \"pve\") {\n        if (confirm(\"Quit this battle and let the monster kill all of your pets?\")) {\n          this.battleService.prematureEndPveBattle(this.userService.currentUser.id);\n          this.battleService.resetBattleServiceBattle();\n        }\n      }\n    }\n\n  }\n\n  DungeonComponent.ɵfac = function DungeonComponent_Factory(t) {\n    return new (t || DungeonComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.BattleService), i0.ɵɵdirectiveInject(i3.LevelUpService), i0.ɵɵdirectiveInject(i4.DungeonService));\n  };\n\n  DungeonComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DungeonComponent,\n    selectors: [[\"app-dungeon\"]],\n    decls: 31,\n    vars: 13,\n    consts: [[1, \"container-fluid\", \"no-gutters\", \"h-100\", \"z-index-1\", 3, \"ngStyle\"], [1, \"row\", \"no-gutters\", \"m-0\", \"p-0\"], [1, \"col-xl-8\", \"col-md-12\", \"no-gutters\", \"m-0\", \"p-0\", \"align-self-start\"], [1, \"row\", \"d-flex\", \"justify-content-center\", \"no-gutters\"], [1, \"col-12\", \"d-flex\", \"justify-content-center\", \"no-gutters\"], [1, \"text-center\"], [1, \"mapTable\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"col-12 m-0 p-0 text-center\", 4, \"ngIf\"], [\"class\", \"col-12 d-flex justify-content-center no-gutters\", 4, \"ngIf\"], [3, \"click\"], [1, \"col-xl-4\", \"col-md-12\", \"text-center\", 3, \"ngStyle\"], [1, \"row\", \"d-flex\", \"justify-content-center\", \"no-gutters\", \"align-items-start\"], [1, \"col-8\", \"m-0\", \"p-0\", \"text-center\"], [1, \"col-4\", \"m-0\", \"p-0\", \"text-center\"], [\"class\", \"btn btn-success\", 3, \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"id\", \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"id\", \"ngClass\"], [3, \"ngClass\", \"click\", 4, \"ngIf\"], [3, \"ngClass\", \"click\"], [1, \"col-12\", \"m-0\", \"p-0\", \"text-center\"], [3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\"], [1, \"btn\", \"btn-success\", 3, \"click\"]],\n    template: function DungeonComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"h3\", 5);\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"div\", 4)(8, \"table\", 6)(9, \"tbody\");\n        i0.ɵɵtemplate(10, DungeonComponent_tr_10_Template, 2, 2, \"tr\", 7);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(11, DungeonComponent_div_11_Template, 3, 0, \"div\", 8);\n        i0.ɵɵtemplate(12, DungeonComponent_div_12_Template, 2, 1, \"div\", 9);\n        i0.ɵɵelementStart(13, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function DungeonComponent_Template_button_click_13_listener() {\n          return ctx.battleService.currentBattle.id = 1;\n        });\n        i0.ɵɵtext(14, \"Open Battle\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function DungeonComponent_Template_button_click_15_listener() {\n          return ctx.battleService.currentBattle.id = 0;\n        });\n        i0.ɵɵtext(16, \"Close Battle\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function DungeonComponent_Template_button_click_17_listener() {\n          ctx.levelUpService.currentLevelingUpPet.availableLevelUps = 1;\n          return ctx.checkLevelUps();\n        });\n        i0.ɵɵtext(18, \"1 Level Up\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function DungeonComponent_Template_button_click_19_listener() {\n          ctx.levelUpService.currentLevelingUpPet.availableLevelUps = 0;\n          return ctx.checkLevelUps();\n        });\n        i0.ɵɵtext(20, \"No Level Up\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(21, \"div\", 11)(22, \"div\", 12)(23, \"div\", 13)(24, \"h4\");\n        i0.ɵɵtext(25, \"Map Log\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(26, \"div\", 14);\n        i0.ɵɵtemplate(27, DungeonComponent_button_27_Template, 2, 0, \"button\", 15);\n        i0.ɵɵtemplate(28, DungeonComponent_button_28_Template, 2, 0, \"button\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(29, DungeonComponent_div_29_Template, 2, 1, \"div\", 8);\n        i0.ɵɵtemplate(30, DungeonComponent_div_30_Template, 2, 1, \"div\", 16);\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction0(10, _c4));\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(ctx.dungeonService.currentDungeon.name);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpureFunction0(11, _c2).constructor(10));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.petSelect == !true && ctx.userService.currentUser.id);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.petSelect == !true && ctx.userService.currentUser.id);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction0(12, _c5));\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", !ctx.fullLog);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.fullLog);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.fullLog);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.fullLog);\n      }\n    },\n    directives: [i5.NgStyle, i5.NgForOf, i5.NgClass, i5.NgIf],\n    styles: [\"\"]\n  });\n  return DungeonComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}